import java.util.*;
public class Main {
    public static void longestPalindromicSubstring(String str, int n) {
        int dp[][] = new int[n][n];
        for(int i = 0; i < n; i++) {
           dp[i][i] = 1;
        }
        
        int left = 0; 
        int right = 0;
        
        for(int i = 0; i < n-1; i++) {
            if(str.charAt(i) == str.charAt(i+1)) {
                left = i;
                right = i+1;
                dp[i][i+1] = 1;
            }
        }
        
        for(int i = 1; i<n; i++) {
            for(int j = 0; j<n-i; j++) {
                if(str.charAt(j) ==str.charAt(j+i)){
                    if(dp[j+1][j+i-1] == 1) {
                        dp[j][j+i] = 1;
                        left = j;
                        right = j+i;
                    }
                    
                } else {
                    dp[j][j+i] = 0;
                }
            }
        }
        
        System.out.println("Longest palindromic substring: "+ str.substring(left, right+1));
    }


	public static void main(String[] args) {
	  String str = "forgeeksskeegfor";
	  longestPalindromicSubstring(str, str.length());
 	}
}
