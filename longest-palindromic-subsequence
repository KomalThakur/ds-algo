import java.util.*;
public class Main {
    public static void longestPalindromicSubsequence(String str, int n) {
        int dp[][] = new int[n][n];
        for(int i = 0; i < n; i++) {
           dp[i][i] = 1;
        }
        
        for(int i = 1; i<n; i++) {
            for(int j = 0; j<n-i; j++) {
                if(str.charAt(j) ==str.charAt(j+i)){
                    dp[j][j+i] = max(dp[j][j+i-1], dp[j+1][j+i]) + 2;
                } else {
                    dp[j][j+i] = max(dp[j][j+i-1], dp[j+1][j+i]);
                }
            }
          
        }
        
        System.out.println("Longest palindromic subsequence length: " + dp[0][n-1]);
    }
    
    public static int max(int i, int j) {
        return i > j ? i : j;
    }
    
    public static void printMatrix(int mat[][], int n) {
        for(int i = 0; i< n; i++) {
            for(int j = 0; j < n; j++) {
                System.out.print(mat[i][j] + " ");
            }
            System.out.println();
        }
        
        System.out.println("\n");
    }
	public static void main(String[] args) {
	  String str = "agbdba";
	  longestPalindromicSubsequence(str, str.length());
 	}
}
